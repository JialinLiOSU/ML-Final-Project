batch_size=16 
epochs_list=[20,40,60,80,100]
layer_inx_list=[-3,-4,-5,-6,-7,-8,-9,-10]
for layer_inx in layer_inx_list:
    for epochs in epochs_list:
        image_input = Input(shape=(224, 224, 3))
        model = VGG16(input_tensor=image_input, include_top=True,weights='imagenet')
        model.summary()

        last_layer = model.get_layer('block5_pool').output
        x= Flatten(name='flatten')(last_layer)
        x = Dense(128, activation='relu', name='fc1')(x)
        x = Dense(128, activation='relu', name='fc2')(x)
        out = Dense(num_classes, activation='softmax', name='output')(x)
        custom_vgg_model2 = Model(image_input, out)

        # freeze all the layers except the dense layers
        for layer in custom_vgg_model2.layers[:layer_inx]:
            layer.trainable = False

        custom_vgg_model2.compile(loss=keras.losses.categorical_crossentropy,
                    optimizer=keras.optimizers.SGD(lr=0.01),
                    metrics=['accuracy'])

